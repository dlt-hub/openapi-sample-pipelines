from typing import List

import dlt
from dlt.extract.source import DltResource
from rest_api import rest_api_source
from rest_api.typing import RESTAPIConfig


@dlt.source(name="swagger_source", max_table_nesting=2)
def swagger_source(
    base_url: str = dlt.config.value,
) -> List[DltResource]:

    # source configuration
    source_config: RESTAPIConfig = {
        "client": {
            "base_url": base_url,
        },
        "resources": [
            {
                "name": "client_options",
                "table_name": "client",
                "endpoint": {
                    "path": "/gen/clients",
                    "paginator": "auto",
                },
            },
            {
                "name": "get_client_options",
                "table_name": "client",
                "endpoint": {
                    "path": "/gen/clients/{language}",
                    "params": {
                        "language": "FILL_ME_IN",  # TODO: fill in required path parameter
                    },
                    "paginator": "auto",
                },
            },
            # A valid `fileId` is generated by the `/clients/{language}` or `/servers/{language}` POST operations.  The fileId code can be used just once, after which a new `fileId` will need to be requested.
            {
                "name": "download_file",
                "table_name": "download",
                "endpoint": {
                    "path": "/gen/download/{fileId}",
                    "params": {
                        "fileId": "FILL_ME_IN",  # TODO: fill in required path parameter
                    },
                    "paginator": "auto",
                },
            },
            {
                "name": "server_options",
                "table_name": "server",
                "endpoint": {
                    "path": "/gen/servers",
                    "paginator": "auto",
                },
            },
            {
                "name": "get_server_options",
                "table_name": "server",
                "endpoint": {
                    "path": "/gen/servers/{framework}",
                    "params": {
                        "framework": "FILL_ME_IN",  # TODO: fill in required path parameter
                    },
                    "paginator": "auto",
                },
            },
        ],
    }

    return rest_api_source(source_config)
